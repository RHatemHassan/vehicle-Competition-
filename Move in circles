#!/usr/bin/env python3
    
import rospy
from std_msgs.msg import Float64
from nav_msgs.msg import Odometry 
import matplotlib.pyplot as plt
import numpy as np
import time
orientationb = 0
def callback(data):
      global orientationb
      orientationb = data.pose.pose.position.y
     
      global pub, pubBrake , pub_steer
      pub = rospy.Publisher("/cmd_vel", Float64, queue_size=0)
      pubBrake = rospy.Publisher('/brakes',Float64, queue_size=0)
      pub_steer = rospy.Publisher("/SteeringAngle", Float64, queue_size=10)
      
      rate = rospy.Rate(10)
      
      
      
      start_time = rospy.Time.now()
    
    
        
      while not rospy.is_shutdown():   
            time_circle = (rospy.Time.now() - start_time).to_sec()
            pos = time_circle * .1 * 120 * .277778
            rospy.loginfo(pos)  
            
             
            if time_circle<12.5:
             pub.publish(0.3)
             pub_steer.publish(15)
            elif (12.5)<=time_circle<(16):
             pub.publish(0.3)
             pub_steer.publish(0)
            elif (16)<=time_circle<(25.343):
             pub.publish(0.3)
             pub_steer.publish(-15)
            elif (25.343)<=time_circle<(27.5):
             pub.publish(0.3)
             pub_steer.publish(0)
        
            else:
             pub.publish(0)
              
             pubBrake.publish(1)
            
      rate.sleep()
             
    
def listener():
     rospy.Subscriber("/odom",Odometry,callback)
     rospy.spin()

if __name__=='__main__':
    rospy.init_node('pionner_control',anonymous=True)
    listener()

    
